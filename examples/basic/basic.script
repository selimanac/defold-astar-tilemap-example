local utils     = require("examples.utils")

local TILE_SIZE = 32

function init(self)
	msg.post("@render:", "use_camera_projection")

	-- Get tilemap
	local _, _, map_width, map_height = tilemap.get_bounds("/test_tilemap#test")

	-- Set camera to center
	go.set_position(vmath.vector3((map_width * TILE_SIZE) / 2, (map_height * TILE_SIZE) / 2, 0), "/camera")

	-- Generate Map array from tilemap
	local tile = 0
	local map = {}
	for y = 1, map_height do
		for x = 1, map_width do
			tile = tilemap.get_tile("/test_tilemap#test", hash("layer1"), x, y)
			table.insert(map, tile)
		end
	end

	-- Setup Astar
	local direction        = astar.DIRECTION_EIGHT
	local allocate         = map_width * map_height
	local typical_adjacent = 8
	local use_cache        = true -- Optional. Default is true
	local use_zero         = false -- Optional. Default is false = 1 based
	local flip_map         = false -- Optional. Default is false

	astar.setup(map_width, map_height, direction, allocate, typical_adjacent, use_cache, use_zero, flip_map)
	astar.set_map(map)

	-- For astar.DIRECTION_EIGHT
	-- Only tile  = 1 passable
	local costs = {
		[1] = {
			1.0, -- E
			1.0, -- N
			1.0, -- W
			1.0, -- S
			1.41, -- NE
			1.41, -- NW
			1.41, -- SW
			1.41 -- SE
		}
	}

	astar.set_costs(costs)
	-- astar.print_map()

	local start_x = 2
	local start_y = 2
	local end_x = 14
	local end_y = 2

	local status, size, total_cost, path = astar.solve(start_x, start_y, end_x, end_y)

	if status == astar.SOLVED then
		-- Set start and end points
		go.set_position(utils.tile_to_screen(start_x, start_y, 0.2, TILE_SIZE), "/start")
		go.set_position(utils.tile_to_screen(end_x, end_y, 0.2, TILE_SIZE), "/end")

		print("SOLVED")
		print("Path Size", size)
		print("Total Cost:", total_cost)

		for _, tile in ipairs(path) do
			factory.create("/factories#dot", utils.tile_to_screen(tile.x, tile.y, 0.1, TILE_SIZE))
			print("x:", tile.x, "y: ", tile.y, "tile ID: ", tile.id)
		end
	elseif status == astar.NO_SOLUTION then
		print("NO_SOLUTION")
	elseif status == astar.START_END_SAME then
		print("START_END_SAME")
	end
end
